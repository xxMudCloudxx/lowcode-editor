// src/code-generator/plugins/project/gitignore.ts

import type { IProjectPlugin } from "../../types/plugin";
import type { ProjectBuilder } from "../../generator/project-builder";

/**
 * @file .gitignore 生成插件
 *
 * @description 职责：
 * 1. 生成一个标准的 .gitignore 文件，用于 Node.js 和 Vite
 * 2. 将文件添加到 projectBuilder 的根目录
 */
const gitignorePlugin: IProjectPlugin = {
  type: "project",
  name: "gitignore",

  run: (projectBuilder: ProjectBuilder) => {
    const gitignoreContent = `
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-intermediate-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# Vite build output
dist

# Vite cache
.vite

# IDE directories
.idea/
.vscode/
`;

    projectBuilder.addFile({
      fileName: ".gitignore",
      filePath: ".gitignore", // 放在项目根目录
      content: gitignoreContent.trim(),
      fileType: "other",
    });
  },
};

export default gitignorePlugin;
