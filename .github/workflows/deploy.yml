# 工作流名称
name: Deploy to GitHub Pages

# 触发条件：当代码被 push到 main 分支时触发
on:
  push:
    branches:
      - main # 注意：如果你的主分支不叫 main，请修改此处

# 权限配置：授予 Actions 读写 GitHub Pages 的权限
permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

# 任务（Jobs）
jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虚拟机环境
    steps:
      # 步骤1：检出代码
      # 使用官方的 actions/checkout@v4 拉取你的仓库代码
      - name: Checkout
        uses: actions/checkout@v4

      # 步骤2：设置 Node.js 环境
      # 使用 actions/setup-node@v4 来安装指定版本的 Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x # 建议使用一个较新的长期支持（LTS）版本
          cache: "npm" # 缓存 npm 依赖，加快后续构建速度

      # 步骤3：安装依赖
      # 使用 npm ci 而不是 npm install，它更快且能保证使用 lock 文件中的精确版本
      - name: Install dependencies
        run: npm ci

      # 步骤4：构建项目
      # 运行 package.json 中定义的 build 脚本
      - name: Build
        run: npm run build

      # 步骤5：上传构建产物
      # 将打包好的 dist 文件夹上传为一个名为 github-pages 的构件（artifact）
      # 后续的 deploy 任务会下载这个构件
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist # 指定要上传的文件夹路径

  # 清理任务（使用脚本实现）
  cleanup:
    name: 🧹 Cleanup old deployments
    runs-on: ubuntu-latest
    steps:
      - name: Keep last 5 deployments and delete the rest
        # 使用 GitHub CLI 和 jq 工具来手动实现清理逻辑
        env:
          # 将 GitHub Token 传入环境变量，以便 gh 命令使用
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 定义环境变量，让脚本更清晰
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          ENVIRONMENT: github-pages
        run: |
          echo "Fetching deployments for environment: $ENVIRONMENT"

          # 1. 使用 GitHub API 获取部署列表，并用 jq 工具处理 JSON
          #   - sort_by(.created_at) | reverse: 按创建时间倒序排序（最新的在最前面）
          #   - .[5:]: 跳过最新的 5 个，选取所有更早的部署
          #   - .[].id: 从选中的部署对象中，只提取 id 字段
          DEPLOYMENT_IDS_TO_DELETE=$(gh api "repos/$OWNER/$REPO/deployments?environment=$ENVIRONMENT&per_page=100" | jq 'sort_by(.created_at) | reverse | .[5:] | .[].id')

          # 检查是否有需要删除的部署
          if [ -z "$DEPLOYMENT_IDS_TO_DELETE" ]; then
            echo "No old deployments to delete. Found 5 or fewer."
            exit 0
          fi

          echo "The following deployment IDs will be deleted:"
          echo "$DEPLOYMENT_IDS_TO_DELETE"

          # 2. 遍历这些旧的部署 ID 并删除它们
          for ID in $DEPLOYMENT_IDS_TO_DELETE; do
            echo "Deleting deployment ID: $ID"
            gh api --method DELETE "repos/$OWNER/$REPO/deployments/$ID"
          done

          echo "Cleanup complete."

  # 部署任务
  deploy:
    needs: [build, cleanup] # 依赖于 build 和 cleanup 任务，必须在它们都成功后才运行
    runs-on: ubuntu-latest
    environment:
      name: github-pages # 指定部署环境为 github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 将部署后的 URL 输出为变量
    steps:
      # 步骤1：部署到 GitHub Pages
      # 使用官方的 actions/deploy-pages@v4 来执行部署
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
